<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fjsaas.web.dao.ExceptionLogDao">
	<resultMap id="exceptionLog" type="ExceptionLog">
		<result property="id" column="id" />
		<result property="thread" column="thread" />
		<result property="level" column="level" />
		<result property="className" column="class_name" />
		<result property="message" column="message" />
		<result property="location" column="location" />
		<result property="createDate" column="create_date" />
		<result property="creatorId" column="creator_id" />
		<result property="updateDate" column="update_date" />
		<result property="updatorId" column="updator_id" />
		<result property="isDel" column="is_del" />
	</resultMap>
	<!-- Select SQL -->
	<sql id="exceptionLogSelector">
		SELECT
			<if test="fields != null">
			 	${fields}
			</if>
			<if test="fields == null">
				id,thread,level,class_name,message,location,create_date,creator_id,update_date,updator_id,is_del	
			</if>
		FROM ass_exception_log
	</sql>
	
	<sql id="exceptionLogListWhere">
		<where>
				<if test="id != null">
					and id=#{id}
				</if>
				<if test="thread != null">
					<if test="threadLike == false">
						and thread=#{thread}
					</if>
					<if test="threadLike == true">
						and  thread like CONCAT("%",#{ thread },"%")
					</if>
				</if>
				
				
				<if test="level != null">
					<if test="levelLike == false">
						and level=#{level}
					</if>
					<if test="levelLike == true">
						and  level like CONCAT("%",#{ level },"%")
					</if>
				</if>
				
				
				<if test="className != null">
					<if test="classNameLike == false">
						and class_name=#{className}
					</if>
					<if test="classNameLike == true">
						and  class_name like CONCAT("%",#{ className },"%")
					</if>
				</if>
				
				
				<if test="message != null">
					<if test="messageLike == false">
						and message=#{message}
					</if>
					<if test="messageLike == true">
						and  message like CONCAT("%",#{ message },"%")
					</if>
				</if>
				
				
				<if test="location != null">
					<if test="locationLike == false">
						and location=#{location}
					</if>
					<if test="locationLike == true">
						and  location like CONCAT("%",#{ location },"%")
					</if>
				</if>
				
				
				<if test="createDate != null">
					and create_date=#{createDate}
				</if>
				
				
				<if test="creatorId != null">
					and creator_id=#{creatorId}
				</if>
				<if test="updateDate != null">
					and update_date=#{updateDate}
				</if>
				
				
				<if test="updatorId != null">
					and updator_id=#{updatorId}
				</if>
				<if test="isDel != null">
					and is_del=#{isDel}
				</if>
				<if test="isDel == null">
					and is_del=0
				</if>
				
				
		</where>
	</sql>
	<sql id="exceptionLogListOrder">
		<if test="orderFields != null and orderFields.size >0">
		order by 
			<foreach collection="orderFields" separator="," item="orderField">
				${orderField.fieldName} ${orderField.order}
			</foreach>
		</if>
	</sql>

	<sql id="exceptionLogListLimit">
		<if test="startRow != null">
			limit #{startRow},#{pageSize}
		</if>
	</sql>

	<!-- 根据主键查询 -->
	<select id="getExceptionLogByKey" resultMap="exceptionLog" parameterType="hashMap">
		SELECT id,thread,level,class_name,message,location,create_date,creator_id,update_date,updator_id,is_del	 
		FROM ass_exception_log
		WHERE
		id=#{id}
		and is_del = 0
	</select>
	<select id="getExceptionLogsByKeys" resultMap="exceptionLog" parameterType="ArrayList">
		SELECT id,thread,level,class_name,message,location,create_date,creator_id,update_date,updator_id,is_del 
		FROM ass_exception_log
		WHERE
		id in
		<foreach collection="list" separator="," item="id" open="(" close=")">
			#{id}
		</foreach>
		and is_del = 0
	</select>

	<!-- 根据主键删除 -->
	<update id="deleteByKey" parameterType="hashMap">
		UPDATE ass_exception_log set is_del = 1 where id=#{id}
	</update>

	<!-- 根据主键批量删除 -->
	<update id="deleteByKeys">
		UPDATE ass_exception_log set is_del = 1 
		where id in
		<foreach collection="list" separator="," item="id" open="(" close=")">
			#{id}
		</foreach>
	</update>

	<!-- 根据主键更新 -->
	<update id="updateExceptionLogByKey" parameterType="ExceptionLog">
		UPDATE ass_exception_log
		<set>
			<trim suffixOverrides=",">
				<if test="id != null">
					id = #{id},
				</if>
				<if test="thread != null">
					thread = #{thread},
				</if>
				<if test="level != null">
					level = #{level},
				</if>
				<if test="className != null">
					class_name = #{className},
				</if>
				<if test="message != null">
					message = #{message},
				</if>
				<if test="location != null">
					location = #{location},
				</if>
				<if test="createDate != null">
					create_date = #{createDate},
				</if>
				<if test="creatorId != null">
					creator_id = #{creatorId},
				</if>
				<if test="updateDate != null">
					update_date = #{updateDate},
				</if>
				<if test="updatorId != null">
					updator_id = #{updatorId},
				</if>
				<if test="isDel != null">
					is_del = #{isDel},
				</if>
			</trim>
		</set>
		WHERE
		id=#{id}
	</update>
	<!-- 分页 -->
	<select id="getExceptionLogListWithPage" parameterType="ExceptionLogQuery" resultMap="exceptionLog">
		<include refid="exceptionLogSelector" />
		<include refid="exceptionLogListWhere" />
		<include refid="exceptionLogListOrder" />
		<include refid="exceptionLogListLimit" />
	</select>
	<!-- 数据总数 -->
	<select id="getExceptionLogListCount" parameterType="ExceptionLogQuery" resultType="int">
		SELECT count(1) FROM ass_exception_log
		<include refid="exceptionLogListWhere" />
	</select>
	<!-- 数据集合 -->
	<select id="getExceptionLogList" parameterType="ExceptionLogQuery" resultMap="exceptionLog">
		<include refid="exceptionLogSelector" />
		<include refid="exceptionLogListWhere" />
		<include refid="exceptionLogListOrder" />
	</select>
	<!-- 添加 -->
	<insert id="addExceptionLog" parameterType="ExceptionLog">
		INSERT INTO ass_exception_log
		<trim prefix="(" suffix=")" suffixOverrides=",">
				<if test="id != null">
					id,
				</if>
				
				<if test="thread != null">
					thread,
				</if>
				
				<if test="level != null">
					level,
				</if>
				
				<if test="className != null">
					class_name,
				</if>
				
				<if test="message != null">
					message,
				</if>
				
				<if test="location != null">
					location,
				</if>
				
				<if test="createDate != null">
					create_date,
				</if>
				
				<if test="creatorId != null">
					creator_id,
				</if>
				
				<if test="updateDate != null">
					update_date,
				</if>
				
				<if test="updatorId != null">
					updator_id,
				</if>
				
					is_del,
				
		</trim>
		VALUES
		<trim prefix="(" suffix=")" suffixOverrides=",">
					
					<if test="id != null">
						#{id},
					</if>
					
					
					<if test="thread != null">
						#{thread},
					</if>
					
					
					<if test="level != null">
						#{level},
					</if>
					
					
					<if test="className != null">
						#{className},
					</if>
					
					
					<if test="message != null">
						#{message},
					</if>
					
					
					<if test="location != null">
						#{location},
					</if>
					
					
					<if test="createDate != null">
						#{createDate},
					</if>
					
					
					<if test="creatorId != null">
						#{creatorId},
					</if>
					
					
					<if test="updateDate != null">
						#{updateDate},
					</if>
					
					
					<if test="updatorId != null">
						#{updatorId},
					</if>
					
					
					<if test="isDel != null">
						#{isDel},
					</if>
					<if test="isDel == null">
						0
					</if>
					
		</trim>
	</insert>
</mapper>